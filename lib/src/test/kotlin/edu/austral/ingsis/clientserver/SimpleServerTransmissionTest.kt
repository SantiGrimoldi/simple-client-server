/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package edu.austral.ingsis.clientserver

import edu.austral.ingsis.clientserver.util.MessageCollectorListener
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import java.net.InetSocketAddress
import kotlin.test.Test
import kotlin.test.assertContains
import kotlin.test.assertEquals

class SimpleServerTransmissionTest {

    companion object {
        const val HOST = "localhost"
        const val PORT = 10_000

        val ADDRESS = InetSocketAddress(HOST, PORT)

        private val DATA_MESSAGE_TYPE = "data-type"
        private val RAW_MESSAGE_TYPE = "raw-type"
    }

    data class Data(val field: String)

    private val factory = ClientServerFactory()

    // Server
    lateinit var server: SimpleServer

    // Clients
    lateinit var client1: SimpleClient
    lateinit var client2: SimpleClient
    lateinit var client3: SimpleClient

    // Collectors
    val serverDataCollector = MessageCollectorListener<Data>()
    val client1DataCollector = MessageCollectorListener<Data>()
    val client2DataCollector = MessageCollectorListener<Data>()
    val client3DataCollector = MessageCollectorListener<Data>()

    @BeforeEach
    fun init() {
        // Creates server
        server = factory.createDefaultServer(PORT)
        server.setListenerFor(DATA_MESSAGE_TYPE, serverDataCollector)

        // Creates clients
        client1 = factory.createDefaultClient(ADDRESS)
        client1.setListenerFor(DATA_MESSAGE_TYPE, client1DataCollector)
        client2 = factory.createDefaultClient(ADDRESS)
        client2.setListenerFor(DATA_MESSAGE_TYPE, client2DataCollector)
        client3 = factory.createDefaultClient(ADDRESS)
        client3.setListenerFor(DATA_MESSAGE_TYPE, client3DataCollector)

        // Clear collectors
        serverDataCollector.clear()
        client1DataCollector.clear()
        client2DataCollector.clear()
        client3DataCollector.clear()
    }

    @AfterEach
    fun dispose() {
        client1.dispose()
        client2.dispose()
        client3.dispose()

        server.dispose()
    }

    @Test
    fun `send string message from client to server`() {
        // Add server listener
        val serverCollector = MessageCollectorListener<String>()
        server.setListenerFor(RAW_MESSAGE_TYPE, serverCollector)

        // Add client listener
        val clientCollector = MessageCollectorListener<String>()
        client1.setListenerFor(RAW_MESSAGE_TYPE, clientCollector)

        // Send message
        val message = Message(RAW_MESSAGE_TYPE, "Hello!")
        client1.sendMessage(message)

        // Waits for message to arrive
        Thread.sleep(200)

        assertEquals(1, serverCollector.messages.size)
        assertEquals(message.payload, serverCollector.messages.first())

        assertEquals(0, clientCollector.messages.size)
    }

    @Test
    fun `send object message from client to server`() {
        // Send message
        val message = Message(DATA_MESSAGE_TYPE, Data("Hello!"))
        client1.sendMessage(message)

        // Waits for message to arrive
        Thread.sleep(200)

        assertEquals(1, serverDataCollector.messages.size)
        assertEquals(message.payload, serverDataCollector.messages.first())

        assertEquals(0, client1DataCollector.messages.size)
    }

    @Test
    fun `send object broadcast to clients`() {
        // Send message
        val message = Message(DATA_MESSAGE_TYPE, Data("Hello!"))
        server.broadcast(message)

        // Waits for message to arrive
        Thread.sleep(200)

        assertEquals(0, serverDataCollector.messages.size)

        assertEquals(1, client1DataCollector.messages.size)
        assertEquals(message.payload, client1DataCollector.messages.first())
        assertEquals(1, client2DataCollector.messages.size)
        assertEquals(message.payload, client2DataCollector.messages.first())
        assertEquals(1, client3DataCollector.messages.size)
        assertEquals(message.payload, client3DataCollector.messages.first())
    }

    @Test
    fun `send several messages between client and sever`() {
        val message1 = Message(DATA_MESSAGE_TYPE, Data("message-1"))
        val message2 = Message(DATA_MESSAGE_TYPE, Data("message-2"))
        val message3 = Message(DATA_MESSAGE_TYPE, Data("message-3"))
        val message4 = Message(DATA_MESSAGE_TYPE, Data("message-4"))

        // Send message
        client1.sendMessage(message1)
        server.broadcast(message2)
        client1.sendMessage(message3)
        server.broadcast(message4)

        // Waits for message to arrive
        Thread.sleep(300)

        assertEquals(2, serverDataCollector.messages.size)
        assertContains(serverDataCollector.messages, message1.payload)
        assertContains(serverDataCollector.messages, message3.payload)

        assertEquals(2, client1DataCollector.messages.size)
        assertContains(client1DataCollector.messages, message2.payload)
        assertContains(client1DataCollector.messages, message4.payload)
    }
}
