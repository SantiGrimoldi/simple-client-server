/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package edu.austral.ingsis.clientserver

import edu.austral.ingsis.clientserver.serialization.json.JsonDeserializer
import edu.austral.ingsis.clientserver.serialization.json.JsonSerializer
import java.net.InetSocketAddress
import kotlin.test.Test

class SimpleServerTest {

    companion object {
        const val HOST = "localhost"
        const val PORT = 10_000

        val ADDRESS = InetSocketAddress(HOST, PORT)
    }

    private val factory = ClientServerFactory()

    @Test
    fun `start and stop server - should release the port`() {
        // Creates server
        val server1 = factory.createDefaultServer(PORT)

        // Keeps it up for a few milliseconds
        Thread.sleep(50)

        // Then kills it
        server1.dispose()

        // Repeats the process
        val server2 = factory.createDefaultServer(PORT)
        Thread.sleep(50)
        server2.dispose()
    }

    @Test
    fun `start and stop server with connections - should release the port`() {
        // Creates server
        val server1 = factory.createDefaultServer(PORT)
        // Creates client
        val client = factory.createDefaultClient(ADDRESS)

        // Keeps it up for a few milliseconds
        Thread.sleep(50)

        // Then kills it
        client.dispose()
        server1.dispose()

        // Wait a few milliseconds
        Thread.sleep(50)

        // Repeats the process
        val server2 = SimpleServer(PORT, JsonSerializer(), JsonDeserializer())
        Thread.sleep(50)
        server2.dispose()
    }
}
