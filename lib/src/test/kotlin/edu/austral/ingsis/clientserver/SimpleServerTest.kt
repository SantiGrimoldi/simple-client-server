/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package edu.austral.ingsis.clientserver

import edu.austral.ingsis.clientserver.serialization.json.JsonDeserializer
import edu.austral.ingsis.clientserver.serialization.json.JsonSerializer
import java.net.InetSocketAddress
import kotlin.test.Test
import kotlin.test.assertEquals

class SimpleServerTest {

    companion object {
        const val HOST = "localhost"
        const val PORT = 10_000

        val ADDRESS = InetSocketAddress(HOST, PORT)
    }

    class StringMessageCollectorListener : MessageListener<String> {
        val messages = mutableListOf<String>()

        override fun handleMessage(message: Message<String>) {
            messages.add(message.payload)
        }
    }

    @Test
    fun `send string message between client and server`() {
        val disposables = mutableListOf<Disposable>()
        try {
            // Creates server
            val server = SimpleServer(PORT, JsonSerializer(), JsonDeserializer())
            val serverCollector = StringMessageCollectorListener()
            server.setListenerFor("type", serverCollector)
            disposables.add(server)

            // Creates client
            val client = SimpleClient(ADDRESS, JsonSerializer(), JsonDeserializer())
            val clientCollector = StringMessageCollectorListener()
            client.setListenerFor("type", clientCollector)
            disposables.add(client)

            val message = Message("type", "Hello!")
            client.sendMessage(message)

            Thread.sleep(100)

            assertEquals(1, serverCollector.messages.size)
            assertEquals(message.payload, serverCollector.messages.first())

            assertEquals(0, clientCollector.messages.size)
        } finally {
            disposables.forEach { it.dispose() }
        }
    }
}
